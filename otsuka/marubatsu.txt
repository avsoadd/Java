import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Scanner;

public class MaruBatsu1 {

	private static MaruBatsu1 instance;

	public enum Turn {
		Player("○", 0),
		CPU("●", 1);

		private String Moji = "";

		public String getMoji() {
			return Moji;
		}

		private Turn(String moji, int i) {
			Moji = moji;
		}
	}

	// boardの初期値。showBoardで使用。
	public String[] board = {"０","１","２",
						 	"３","４","５",
						 	"６","７","８"};

	// 土台。
	public void showBoard() {

		System.out.println("----------");

		for (int row = 0; row < 3; row++) {
			System.out.print("|");
			for (int col = 0; col < 3; col++) {
				System.out.print(board[col + (row * 3)]);
				System.out.print("|");
			}
			System.out.println();
			System.out.println("----------");
		}
	}

	// Listの中のIntegerを配列に。
	// 0〜8までListに格納
	public List <Integer> avairableInputList = new ArrayList <Integer>();

	// MaruBatsu6のコンストラクタ
	private MaruBatsu1() {
		for(int i = 0; i < 9; i++) {
			avairableInputList.add(i);
		}
	}

	public static MaruBatsu1 GetInstance() {
		if(null == instance) {
			instance = new MaruBatsu1();
		}
		return instance;
	}

	// Playerの入力処理
	public int playerInput() {

		for(int i = 0; i < avairableInputList.size(); i++) {
			System.out.print(avairableInputList.get(i) + " ");
		}
		System.out.println("のいずれかの数値を入力してください");

		int inputInt = -1;
		while(-1 >= inputInt)
		{
			Scanner scan = new Scanner(System.in);
			try {
				inputInt = scan.nextInt();
				int index = 0;
				for(; index < avairableInputList.size(); index++) {
					if(avairableInputList.get(index) == inputInt) {
						break;
					}
				}
				inputInt = avairableInputList.remove(index);
			}
			catch(Exception e) {
				e.printStackTrace();
				System.out.println("入力誤り");
				inputInt = -1;
			}
		}
//		scan.close();
		return inputInt;
	}

	// CPUの入力処理
	public int cpuInput() {
		Random rand = new Random();
		System.out.println("************************");
		System.out.println("cpuの入力です。");
		int index = rand.nextInt(avairableInputList.size() - 1);
		System.out.println(avairableInputList.size());
		System.out.println(index);
		System.out.println(avairableInputList.get(index));

		return avairableInputList.remove(index);
	}

	// 勝利判定
	public boolean MaruBatsuResult(MaruBatsu1 mb,String str) {
		boolean isRet = false;

		// 横の勝利インデックス配列
		int[][] hIndexList = {
			{0, 1, 2},
			{3, 4, 5},
			{6, 7, 8}
		};

		isRet = IsCheck(hIndexList, str);

		if(!isRet)
		{
			// 縦の勝利インデックス配列
			int[][] vIndexList = {
				{0, 3, 6},
				{1, 4, 7},
				{2, 5, 7}
			};
			isRet = IsCheck(vIndexList, str);
		}

		if(!isRet)
		{
			// 斜めの勝利インデックス配列
			int[][] dIndexList = {
				{0, 4, 8},
				{2, 4, 6},
			};
			isRet = IsCheck(dIndexList, str);
		}

		return isRet;
	}

	public boolean IsCheck(int[][] indexList, String str)
	{
		boolean isRet = false;
		for(int[] i : indexList)
		{
			for(int j : i)
			{
				if(!board[j].equals(str))
				{
					isRet = false;
					break;
				}
				else
				{
					isRet = true;
				}
			}

			if(isRet)
			{
				break;
			}
		}

		return isRet;
	}

	// mainメソッド
	public static void main(String[] args) {
		int i = 0;
		setI(i);
		System.out.println(i);

		String[] s = new String[1];
		s[0] = "";
		setS(s);
		System.out.println(s[0]);

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("リンゴ", 100);
		map.put("ブドウ", 20);

		for(String key : map.keySet())
		{
			System.out.println(key);
		}
		for(Object obj : map.values())
		{
			System.out.println(obj);
		}
		for(Entry<String, Object> entry : map.entrySet())
		{
			System.out.println(entry.getKey() +":" + entry.getValue() );
		}

		MaruBatsu1 mb = MaruBatsu1.GetInstance();
		MaruBatsu1 mb2 = MaruBatsu1.GetInstance();
		try {
			Class<?> cls = Class.forName("MaruBatsu1");
			Method method = cls.getMethod("setI", int.class);
			method.invoke(cls, i);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		mb.showBoard();

		Turn turn = Turn.Player;

		// for文から勝ちに変更する
		while(mb.avairableInputList.size() > 0) {
			int index = 0;
			String setting = turn.getMoji();
			String message = "";
			if(turn == Turn.Player)
			{
				index = mb.playerInput();
				turn = Turn.CPU;
				message = "Player";
			}
			else
			{
				index = mb.cpuInput();
				turn = Turn.Player;
				message = "cpu";
			}

			mb.board[index] = setting;
			mb.showBoard();

			if(mb.MaruBatsuResult(mb, setting))
			{
				System.out.println( message + "の勝ちです。");
				break;
			}

			if(mb.avairableInputList.size() == 0)
			{
				System.out.println("引き分けです。");
			}
		}
	}

	public static void setI(int i)
	{
		i = 10;
		System.out.println("setI");
	}

	public static void setS(String[] s)
	{
		s[0] = "変更";
	}
}